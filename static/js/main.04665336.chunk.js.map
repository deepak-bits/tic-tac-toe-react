{"version":3,"sources":["App.js","index.js"],"names":["Square","_ref","value","onSquareClick","React","createElement","className","onClick","Board","_ref2","xIsNext","squares","onPlay","handleClick","idx","calculateWinner","newSquares","_toConsumableArray","status","winner","Fragment","Game","_useState","useState","Array","fill","_useState2","_slicedToArray","history","setHistory","_useState3","_useState4","currentMove","setCurrentMove","currentSquares","moves","map","move","description","key","nextHistory","concat","slice","length","_i","_lines","line","_line","a","b","c","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.04665336.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button \n      className='square'\n      onClick={onSquareClick}\n    >\n      {value}\n    </button>\n  )\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  // const [xIsNext, setXIsNext] = useState(true);\n  // const [squares, setSquares] = useState(Array(9).fill(null));\n\n  function handleClick(idx) {\n    if(squares[idx] || calculateWinner(squares)) return;\n    const newSquares = [...squares];\n    newSquares[idx] = xIsNext ? 'X' : 'O';\n    onPlay(newSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  return (\n    <>\n      <div className=\"board-row\">\n        <div className=\"status\">{status}</div>\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  )\n}\n\nfunction Game() {\n  // const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(newSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), newSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    // setHistory(prevState => ([...prevState.slice(0, currentMove + 1), newSquares]));\n    // setCurrentMove(history.length);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n        </div>\n        <div className=\"game-info\">\n          <ol>{moves}</ol>\n        </div>\n      </div>\n  );\n}\n\nexport default Game;\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for(const line of lines) {\n    const [a, b, c] = line;\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n","import React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./styles.css\";\n\nimport Game from \"./App\";\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <Game />\n  </StrictMode>\n);"],"sourceRoot":""}